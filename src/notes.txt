
First and foremost, I would like to notice that there is a bug in the provided code. Box owners are noted wrong.
The reason is that in the getActionResult method checkCompleteBox is called on a newBoard where the player has already
been changed. And the completed square is marked by the opposite player. I decided not to modify the provided code. However,
we could either correct the checkCompleteBox method to mark not with player but the opposite one or, alternatively, we
can implement BoardTerminalTest so that the number of squares of Max are subtracted from the number of squares of Min.
But I have decided to keep the correct logic and not to fix the bug.

4) I have run the Minimax algorithm for a 1x2 board. Basically, the number of generated states during the Minimax
algorithm is calculated as follows: 7 + 7*6 + 7*6*5 + 7*6*5*4 + 7*6*5*4*3 + 7*6*5*4*3*2 + 7*6*5*4*3*2*1.
However, many of those states are the same. That is why there are only
139 states in the strategy map for all distinct combinations on Board. Although the algorithm terminated for 1x2 board,
it would hardly terminate on larger boards. The reason is that we do calculate the minimax value for the same state multiple
(I say multiple, you imagine many many many) times. Thus, to improve the execution of Minimax algorithm, we can keep track
of the states that we have calculated the minimax values for already and return the already calculated ones without doing
it again and again. This optimized version is derived in the next problem.

5)  As we see in the below table the number of states in the returned strategy is the same for both versions of Minimax
algorithm. The reason is that in both cases the number of reachable states is the same and we should keep a minimax value
for all of them. However, we notice significance difference in the number of generated states during the search. It is because
once we generate a state we have already calculated a minimax value for it, we do not go deeper in the game tree and expand it state.
One could argue that the number of generated states during optimized Minimax should be the same as the number of states
in the returned strategy. However, we check for the repetition of the states after creating a new board as a result
of applied action.

6)    1x2 Board
                            |    Generated States   |   States in Strategy  |
Minimax                     |           13699       |           139         |
Optimized Minimax           |           466         |           139         |
Alpha-Beta Search           |           587         |           61          |
Optimized Alpha-Beta Search |           39          |           33          |

For both versions of Alpha-Beta Search we see drop in both generated states and states in strategy. The reason is that
here lots of pruning appears as the final utilities do not range much and we can get the minimums or maximums quickly.
I think we could even get better performance if we initially provide the maximum scores for both players. That can be easily
calculated having the dimensions of the board.